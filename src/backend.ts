import axios, { AxiosInstance } from "axios";

interface AuthTokenData {
  token: string;
  validUntil: string;
}

interface AuthTokens {
  access: AuthTokenData;
  refresh: AuthTokenData;
}

export class TookeyBackend {
  client: AxiosInstance;
  access?: AuthTokenData;
  refresh?: AuthTokenData;

  constructor(private url: string) {
    this.client = axios.create({
      baseURL: this.url,
    });
  }

  setAuthTokens(tokens: AuthTokens) {
    this.access = tokens.access;
    this.refresh = tokens.refresh;
  }

  async signin(otp: string) {
    const response = await this.client.post(
      "/api/auth/signin",
      {},
      {
        headers: {
          "X-SIGNIN-KEY": otp,
        },
      }
    );

    return response.data;
  }

  async myKeys() {
    const responce = await this.client.get(
      "/api/keys",
      {
        headers: {
          Authorization: `Bearer ${this.access?.token}`,
        },
      }
    );

    return responce.data;
  }

  async createApiKey(name: string, keys: string[], description: string = "Generated by Hardhat plugin") {
    const responce = await this.client.post(
      "/api/shareable-tokens",
      {
        keys,
        name,
        description,
      },
      {
        headers: {
          Authorization: `Bearer ${this.access?.token}`,
        },
      }
    );

    return responce.data;
  }

  async createKey(
    name: string,
    description: string,
    participantsThreshold: number,
    participantsCount: number,
    tags: string[] = [],
    timeoutSeconds: number = 60
  ) {
    const responce = await this.client.post(
      "/api/keys",
      {
        participantsThreshold,
        participantsCount,
        participantIndex: 1,
        timeoutSeconds,
        name,
        description,
        tags,
      },
      {
        headers: {
          Authorization: `Bearer ${this.access?.token}`,
        },
      }
    );

    return responce.data;
  }
}
